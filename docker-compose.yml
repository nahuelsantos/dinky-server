services:
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:2.30.1
    restart: always
    ports:
      - "9000:9000"  # Portainer UI (internal access only)
      - "8000:8000" #Edge agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - traefik_network #Not needed for portainer, added if needed

  traefik:
    container_name: traefik
    image: traefik:v3.4.1
    restart: always
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "8080:8080"  # Traefik dashboard (internal access only)
      - "80:80"  # HTTP (internal access only, cloudflared tunnels traffic)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./infrastructure/traefik/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml
    networks:
      - traefik_network

  cloudflared:
    container_name: cloudflared
    image: cloudflare/cloudflared:2025.5.0
    restart: always
    command: tunnel --config /etc/cloudflared/config.yml run
    volumes:
      - ./infrastructure/cloudflared/config.yml:/etc/cloudflared/config.yml
      - cloudflared-data:/etc/cloudflared # Persist credentials
    environment:
      - TUNNEL_ID=${TUNNEL_ID:-your-tunnel-id-here}
      - TUNNEL_TOKEN=${TUNNEL_TOKEN:-your-tunnel-token-here}
    networks:
      - traefik_network
    depends_on:
      - traefik
      
  pihole:
    container_name: pihole
    image: pihole/pihole:2025.04.0
    restart: always
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8081:80/tcp"  # Web interface
    environment:
      - TZ=${TZ:-Europe/Madrid}
      - WEBPASSWORD=${PIHOLE_PASSWORD:-admin123}
      - ServerIP=${SERVER_IP:-127.0.0.1}
      - DNSMASQ_LISTENING=all
      - DNS1=1.1.1.1
      - DNS2=8.8.8.8
    volumes:
      - pihole_data:/etc/pihole
      - pihole_dnsmasq:/etc/dnsmasq.d
    networks:
      - traefik_network
    cap_add:
      - NET_ADMIN
    dns:
      - 1.1.1.1  # Use Cloudflare DNS directly
      - 8.8.8.8  # Use Google DNS as backup

  # Mail Services
  mail-server:
    container_name: mail-server
    build:
      context: ./services/mail-server
      dockerfile: Dockerfile
    hostname: ${MAIL_HOSTNAME:-mail.dinky.local}
    restart: unless-stopped
    networks:
      - traefik_network
      - mail-internal
    ports:
      - "25:25"   # SMTP (now accessible from other containers)
      - "587:587" # SMTP submission (internal access only)
    volumes:
      - mail-data:/var/mail
      - mail-logs:/var/log/mail
    environment:
      - TZ=${TZ:-Europe/Madrid}
      - MAIL_DOMAIN=${MAIL_DOMAIN:-dinky.local}
      - MAIL_HOSTNAME=${MAIL_HOSTNAME:-mail.dinky.local}
      - DEFAULT_FROM=${DEFAULT_FROM:-noreply@dinky.local}
      - DEFAULT_TO=${DEFAULT_TO:-admin@dinky.local}
      - SMTP_RELAY_HOST=${SMTP_RELAY_HOST:-smtp.gmail.com}
      - SMTP_RELAY_PORT=${SMTP_RELAY_PORT:-587}
      - SMTP_RELAY_USERNAME=${SMTP_RELAY_USERNAME:-your-gmail-username@gmail.com}
      - SMTP_RELAY_PASSWORD=${SMTP_RELAY_PASSWORD:-your-gmail-app-password}
      - USE_TLS=${USE_TLS:-yes}
      - TLS_VERIFY=${TLS_VERIFY:-yes}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # LGTM Stack Components

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v3.4.0
    container_name: prometheus
    restart: always
    user: "65534:992"  # nobody:docker - gives access to docker socket
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=30d
      - --storage.tsdb.retention.size=10GB
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
      - --web.enable-admin-api
    networks:
      - traefik_network
    depends_on:
      - traefik

# Alertmanager - Alert management and routing
  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    restart: always
    ports:
      - "9093:9093"
    environment:
      - DEFAULT_TO=${DEFAULT_TO:-admin@dinky.local}
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
      - --web.external-url=http://localhost:9093
      - --cluster.listen-address=
    networks:
      - traefik_network
    depends_on:
      - mail-server

  # Loki - Log aggregation
  loki:
    image: grafana/loki:3.5
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - traefik_network

  # Promtail - Log collector for Loki
  promtail:
    image: grafana/promtail:3.5
    container_name: promtail
    restart: always
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - traefik_network
    depends_on:
      - loki

  # Tempo - Distributed tracing
  tempo:
    image: grafana/tempo:2.7.2
    container_name: tempo
    restart: always
    ports:
      - "3200:3200"  # Tempo receiver
    volumes:
      - ./monitoring/tempo:/etc/tempo
      - tempo_data:/var/tempo
    command: -config.file=/etc/tempo/tempo-config.yml
    networks:
      - traefik_network

  # Pyroscope - Continuous profiling
  pyroscope:
    image: grafana/pyroscope:1.13.4
    container_name: pyroscope
    restart: always
    ports:
      - "4040:4040"
    volumes:
      - ./monitoring/pyroscope:/etc/pyroscope
      - pyroscope_data:/var/lib/pyroscope
    command: server -config=/etc/pyroscope/pyroscope-config.yml
    networks:
      - traefik_network

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:12.0.1
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana:/etc/grafana
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    networks:
      - traefik_network
    depends_on:
      - prometheus
      - loki
      - tempo
      - pyroscope

  # OpenTelemetry Collector - Telemetry collection and processing
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.127.0
    container_name: otel-collector
    restart: always
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "8888:8888"  # Metrics endpoint
      - "8889:8889"  # Prometheus metrics endpoint
    volumes:
      - ./monitoring/otel-collector:/etc/otel-collector
    command: --config=/etc/otel-collector/otel-collector-config.yml
    networks:
      - traefik_network
    depends_on:
      - prometheus
      - loki
      - tempo
      - pyroscope

  # Container Metrics (added by monitoring setup)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.0
    container_name: cadvisor
    restart: always
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8082:8080"  # cAdvisor web interface (avoid conflict with Traefik on 8080)
    networks:
      - traefik_network
    command:
      - '--docker_only=true'
      - '--storage_duration=1m0s'
      - '--housekeeping_interval=10s'

  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - traefik_network

  # Blackbox Exporter - HTTP/HTTPS probing for static sites
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.26.0
    container_name: blackbox-exporter
    restart: always
    ports:
      - "9115:9115"
    volumes:
      - ./monitoring/blackbox:/etc/blackbox_exporter
    networks:
      - traefik_network
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'

# Argus - LGTM Stack Validator
  argus:
    image: ghcr.io/nahuelsantos/argus:latest
    container_name: argus
    ports:
      - "3001:3001"
    environment:
      - ARGUS_SERVER_IP=${ARGUS_SERVER_IP:-127.0.0.1}
      - ARGUS_ENVIRONMENT=${ARGUS_ENVIRONMENT:-development}
      - ARGUS_VERSION=${ARGUS_VERSION:-v0.0.10}
      - ARGUS_GRAFANA_URL=${ARGUS_GRAFANA_URL:-http://localhost:3000}
      - ARGUS_PROMETHEUS_URL=${ARGUS_PROMETHEUS_URL:-http://localhost:9090}
      - ARGUS_LOKI_URL=${ARGUS_LOKI_URL:-http://localhost:3100}
      - ARGUS_TEMPO_URL=${ARGUS_TEMPO_URL:-http://localhost:3200}
      - ARGUS_ALERTMANAGER_URL=${ARGUS_ALERTMANAGER_URL:-http://localhost:9093}
      - ARGUS_GRAFANA_USERNAME=${ARGUS_GRAFANA_USERNAME:-admin}
      - ARGUS_GRAFANA_PASSWORD=${ARGUS_GRAFANA_PASSWORD:-admin}
    depends_on:
      - prometheus
      - grafana
      - loki
      - tempo
    networks:
      - traefik_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  cloudflared-data:
  grafana_data:
  pihole_data:
  pihole_dnsmasq:
  portainer_data:
  prometheus_data:
  alertmanager_data:
  loki_data:
  tempo_data:
  pyroscope_data:
  mail-data:
  mail-logs:

networks:
  traefik_network:
    external: true
  mail-internal:
    driver: bridge

x-common-variables: &common-variables
  DOMAIN_NAME: ${DOMAIN_NAME:-example.com}
  SERVER_IP: ${SERVER_IP:-127.0.0.1}
  TZ: ${TZ:-Europe/Madrid}