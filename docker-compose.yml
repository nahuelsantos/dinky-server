services:
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:2.29.0
    restart: always
    ports:
      - "9000:9000"  # Portainer UI (internal access only)
      - "8000:8000" #Edge agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - traefik_network #Not needed for portainer, added if needed

  traefik:
    container_name: traefik
    image: traefik:v3.3.6
    restart: always
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "8080:8080"  # Traefik dashboard (internal access only)
      - "80:80"  # HTTP (internal access only, cloudflared tunnels traffic)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./infrastructure/traefik/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml
    networks:
      - traefik_network

  cloudflared:
    container_name: cloudflared
    image: cloudflare/cloudflared:2025.4.0
    restart: always
    command: tunnel --config /etc/cloudflared/config.yml run
    volumes:
      - ./infrastructure/cloudflared/config.yml:/etc/cloudflared/config.yml
      - cloudflared-data:/etc/cloudflared # Persist credentials
    env_file:
      - .env
    networks:
      - traefik_network
    depends_on:
      - traefik
      
  pihole:
    container_name: pihole
    image: pihole/pihole:2025.04.0
    restart: always
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8081:80/tcp"  # Web interface
    env_file:
      - .env
    environment:
      TZ: 'Europe/Madrid'
      WEBPASSWORD: '${PIHOLE_PASSWORD}'
      ServerIP: '192.168.3.2'
      DNSMASQ_LISTENING: 'all'
      DNS1: '1.1.1.1'  # Cloudflare DNS
      DNS2: '8.8.8.8'  # Google DNS
    volumes:
      - pihole_data:/etc/pihole
      - pihole_dnsmasq:/etc/dnsmasq.d
    networks:
      - traefik_network
    cap_add:
      - NET_ADMIN
    dns:
      - 1.1.1.1  # Use Cloudflare DNS directly
      - 8.8.8.8  # Use Google DNS as backup

  # Mail Services
  mail-server:
    container_name: mail-server
    build:
      context: ./services/mail-server
      dockerfile: Dockerfile
    hostname: ${MAIL_HOSTNAME:-mail.dinky.local}
    restart: unless-stopped
    networks:
      - traefik_network
      - mail-internal
    ports:
      - "25:25"   # SMTP (now accessible from other containers)
      - "587:587" # SMTP submission (internal access only)
    volumes:
      - mail-data:/var/mail
      - mail-logs:/var/log/mail
    environment:
      - TZ=America/Argentina/Buenos_Aires
      - MAIL_DOMAIN=${MAIL_DOMAIN:-dinky.local}
      - MAIL_HOSTNAME=${MAIL_HOSTNAME:-mail.dinky.local}
      - DEFAULT_FROM=${DEFAULT_FROM:-noreply@dinky.local}
      - SMTP_RELAY_HOST=${SMTP_RELAY_HOST:-smtp.gmail.com}
      - SMTP_RELAY_PORT=${SMTP_RELAY_PORT:-587}
      - SMTP_RELAY_USERNAME=${SMTP_RELAY_USERNAME:-your-gmail-username@gmail.com}
      - SMTP_RELAY_PASSWORD=${SMTP_RELAY_PASSWORD:-your-gmail-app-password}
      - USE_TLS=${USE_TLS:-yes}
      - TLS_VERIFY=${TLS_VERIFY:-yes}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mail-api:
    image: ghcr.io/nahuelsantos/mail-api:latest
    container_name: mail-api
    restart: unless-stopped
    networks:
      - traefik_network
      - mail-internal
    depends_on:
      - mail-server
    environment:
      - SMTP_HOST=mail-server
      - SMTP_PORT=25
      - DEFAULT_FROM=${DEFAULT_FROM:-noreply@dinky.local}
      - DEFAULT_TO=${DEFAULT_TO:-admin@example.com}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-dinky.local}
      - PORT=3000
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Internal access only, no public exposure via Traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mail-api.rule=Host(`mail-api.local`)"
      - "traefik.http.routers.mail-api.service=mail-api"
      - "traefik.http.services.mail-api.loadbalancer.server.port=3000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # LGTM Stack Components

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v3.3.0
    restart: always
    ports:
      - "192.168.3.2:9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
    networks:
      - traefik_network
    depends_on:
      - traefik

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.14
    restart: always
    ports:
      - "192.168.3.2:3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - traefik_network

  # Promtail - Log collector for Loki
  promtail:
    image: grafana/promtail:2.9.0
    restart: always
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - traefik_network
    depends_on:
      - loki

  # Tempo - Distributed tracing
  tempo:
    image: grafana/tempo:2.7.2
    restart: always
    ports:
      - "192.168.3.2:3200:3200"  # Tempo receiver
      - "192.168.3.2:4317:4317"  # OTLP gRPC receiver
      - "192.168.3.2:4318:4318"  # OTLP HTTP receiver
    volumes:
      - ./monitoring/tempo:/etc/tempo
      - tempo_data:/tmp/tempo
    command: -config.file=/etc/tempo/tempo-config.yml
    networks:
      - traefik_network

  # Pyroscope - Continuous profiling
  pyroscope:
    image: grafana/pyroscope:1.13.2
    restart: always
    ports:
      - "192.168.3.2:4040:4040"
    volumes:
      - ./monitoring/pyroscope:/etc/pyroscope
      - pyroscope_data:/var/lib/pyroscope
    command: server -config=/etc/pyroscope/pyroscope-config.yml
    networks:
      - traefik_network

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:11.6.0
    restart: always
    ports:
      - "192.168.3.2:3000:3000"
    volumes:
      - ./monitoring/grafana:/etc/grafana
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    networks:
      - traefik_network
    depends_on:
      - prometheus
      - loki
      - tempo
      - pyroscope
    env_file:
      - .env

  # OpenTelemetry Collector - Telemetry collection and processing
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.124.1
    restart: always
    ports:
      - "192.168.3.2:4317:4317"  # OTLP gRPC
      - "192.168.3.2:4318:4318"  # OTLP HTTP
      - "192.168.3.2:8888:8888"  # Metrics endpoint
    volumes:
      - ./monitoring/otel-collector:/etc/otel-collector
    command: --config=/etc/otel-collector/otel-collector-config.yml
    networks:
      - traefik_network
    depends_on:
      - prometheus
      - loki
      - tempo
      - pyroscope

volumes:
  cloudflared-data:
  grafana_data:
  pihole_data:
  pihole_dnsmasq:
  portainer_data:
  prometheus_data:
  loki_data:
  tempo_data:
  pyroscope_data:
  mail-data:
  mail-logs:

networks:
  traefik_network:
    external: true
  mail-internal:
    driver: bridge

x-common-variables: &common-variables
  DOMAIN_NAME: ${DOMAIN_NAME:-example.com}
  SERVER_IP: ${SERVER_IP:-192.168.3.2}
  TZ: ${TZ:-America/Argentina/Buenos_Aires}
